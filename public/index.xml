<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kirill Pavlov</title>
    <link>http://kirillpavlov.com/</link>
    <description>Recent content on Kirill Pavlov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Feb 2016 23:06:18 +0800</lastBuildDate>
    <atom:link href="http://kirillpavlov.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go versions, how to make updates easier</title>
      <link>http://kirillpavlov.com/blog/2016/02/20/go-versions-how-to-make-updates-easier/</link>
      <pubDate>Sat, 20 Feb 2016 23:06:18 +0800</pubDate>
      
      <guid>http://kirillpavlov.com/blog/2016/02/20/go-versions-how-to-make-updates-easier/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; is an open source programming language that makes it easy to build simple, reliable, and efficient software.&lt;/p&gt;

&lt;p&gt;Because of its rapid development, there is an issue with version updates.
It requires not only download and compile new version, but also update &lt;code&gt;$GOROOT&lt;/code&gt; and &lt;code&gt;$GOPATH&lt;/code&gt; environment variables.&lt;/p&gt;

&lt;p&gt;One way to simplify this process is to use version manager, such as &lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;gvm&lt;/a&gt;.
Installations process is super easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install proper version of Go use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gvm install go1.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As simple as that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get random lines from file with bash</title>
      <link>http://kirillpavlov.com/blog/2015/08/27/get-random-lines-from-file-with-bash/</link>
      <pubDate>Thu, 27 Aug 2015 06:18:14 +0000</pubDate>
      
      <guid>http://kirillpavlov.com/blog/2015/08/27/get-random-lines-from-file-with-bash/</guid>
      <description>

&lt;p&gt;Data sampling is one of the duties of data scientists and data engineers.
One may require to split original data into train and test subsets.
How could we do it fast with less amount of code?
This article shows usage of different command line tools for such task.&lt;/p&gt;

&lt;p&gt;There are several ways to get random lines from a file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sort lines with random key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shuf&lt;/code&gt; from GNU core utils&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rl&lt;/code&gt; randomize-lines package&lt;/li&gt;
&lt;li&gt;perl one-liner&lt;/li&gt;
&lt;li&gt;python one-liner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the approaches would be compared in terms of execution time, tools availability and code complexity. File to be sorted consists of 10M lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FILENAME=&amp;quot;/tmp/random-lines.$$.tmp&amp;quot;
NUMLINES=10000000
seq -f &#39;line %.0f&#39; $NUMLINES &amp;gt; $FILENAME;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sort:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;sort&lt;/h2&gt;

&lt;p&gt;Default &lt;code&gt;sort&lt;/code&gt; has option &lt;code&gt;-R&lt;/code&gt;, &lt;code&gt;--random-sort&lt;/code&gt; which sorts lines by random hash. However, if there are two lines with the same content, their hashes would be the same and they would be sorted one after another. To prevent such case, one may possible to make all of the lines unique via adding line number to all of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nl -ba $FILENAME | sort -R | sed &#39;s/.*[0-9]\t//&#39; | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time: 3 min 09.77 sec&lt;/p&gt;

&lt;p&gt;Complexity: medium, need to keep in mind making lines unique&lt;/p&gt;

&lt;p&gt;Availability: good&lt;/p&gt;

&lt;h2 id=&#34;shuf:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;shuf&lt;/h2&gt;

&lt;p&gt;Another bash tool &lt;code&gt;shuf&lt;/code&gt; on the other hand will sufficiently randomize a list, including not putting duplicate lines next to each other. Another advantage of this tool is it&amp;rsquo;s availability. Being part of GNU core utils it is available on nearly every machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shuf $FILENAME | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has parameter &lt;code&gt;-n&lt;/code&gt; to specify number of lines to output, however based on my tests, it does not speed up the process. Combination with &lt;code&gt;head&lt;/code&gt; works better.&lt;/p&gt;

&lt;p&gt;Time: 0.14 sec&lt;/p&gt;

&lt;p&gt;Complexity: easy&lt;/p&gt;

&lt;p&gt;Availability: good&lt;/p&gt;

&lt;h2 id=&#34;randomized-lines:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;randomized-lines&lt;/h2&gt;

&lt;p&gt;Tool &lt;code&gt;rl&lt;/code&gt; from &lt;a href=&#34;http://manpages.ubuntu.com/manpages/wily/en/man1/rl.1.html&#34;&gt;randomize-lines&lt;/a&gt; package makes random sampling easy, however, not every machine has it. As mentioned in it&amp;rsquo;s description: &amp;ldquo;It does this with only a single pass over the input while trying to use as little memory as possible&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rl $FILENAME | head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time: 0.68 sec&lt;/p&gt;

&lt;p&gt;Complexity: easy&lt;/p&gt;

&lt;p&gt;Availability: bad, need to install from external repository&lt;/p&gt;

&lt;h2 id=&#34;perl:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;perl&lt;/h2&gt;

&lt;p&gt;Perl is a good language for text processing. For those developers, who are less familiar with bash, it might be native to try it first.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat $FILENAME | perl -MList::Util=shuffle -e &#39;print shuffle(&amp;lt;STDIN&amp;gt;);&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time: 2.11 sec&lt;/p&gt;

&lt;p&gt;Availability: medium, some of the machines might not have it&lt;/p&gt;

&lt;p&gt;Complexity: medium, need to remember how to call perl from bash and include libraries&lt;/p&gt;

&lt;h2 id=&#34;python:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;python&lt;/h2&gt;

&lt;p&gt;Python is among most popular programming languages. Nowadays it exists on nearly every machine and a lot of developers worked with it at least once. It has library to work with random numbers and shuffles. As well as perl, it could be invoked from bash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -c &amp;quot;import random, sys; lines = open(sys.argv[1]).readlines(); random.shuffle(lines); print &#39;&#39;.join(lines),&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Script execution is inefficient, it requires to store data in memory.&lt;/p&gt;

&lt;p&gt;Time: 6.92 sec&lt;/p&gt;

&lt;p&gt;Availability: medium, some of the machines might not have it&lt;/p&gt;

&lt;p&gt;Complexity: medium, need to remember how to call perl from bash and include libraries&lt;/p&gt;

&lt;h2 id=&#34;conclusion:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;To sample random lines from command line, default &lt;code&gt;shuf&lt;/code&gt; from core utils is probably the best choice. It is very easy to use and outperforms others in term of execution time.
However, everything depends on a task. For machine learning problems sampling is not a bottleneck and might not require fastest execution.&lt;/p&gt;

&lt;h2 id=&#34;appendix:7f16ea4a76eb101e46f16364e2326e6b&#34;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;Gist with benchmark file:
&lt;script src=&#34;//gist.github.com/34836af4fa1d6c2a0dfa.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static site generator for personal blog</title>
      <link>http://kirillpavlov.com/blog/2015/08/22/static-site-generator-for-personal-blog/</link>
      <pubDate>Sat, 22 Aug 2015 23:31:19 +0800</pubDate>
      
      <guid>http://kirillpavlov.com/blog/2015/08/22/static-site-generator-for-personal-blog/</guid>
      <description>&lt;p&gt;Many of us would like to have personal identity in the Internet, write blog, share pictures, code and discuss interesting topics.
For tech related articles social networks would not be enought and we should look for personal blog or website solution.
Here I would like to explain some ideas behing my choice &amp;ndash; &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;, static site generator written in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, let us write down requirements for personal page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web site should work even if we dont have time to support it&lt;/li&gt;
&lt;li&gt;It should support custom domains&lt;/li&gt;
&lt;li&gt;In case of blog, we should be able to add articles easily and deployment should not be problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A while ago I had personal page, stored on virtual machine in some cloud service.
This requires me to pay for VM and causes deployment difficulties.
I realized, that solution should be different.&lt;/p&gt;

&lt;p&gt;WordPress offers good service, but price of custom domain makes use of it questionable.
My decision was to use static site generator and deploy it to GitHub, because it is free.
I did not want to customise site a lot from the beginning, content is more important at that period.
Moreover, additional tools, such as Google Analytics and Discus comes with framework.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;a lot of static site generators&lt;/a&gt; on the market.
How to choose right one?
My goal was to choose something simple, yet flexible to be able to use it in other projects as well.&lt;/p&gt;

&lt;p&gt;First of all I checked python Pelican, because of my language knowledge.
It looks very similar to Django.
I did not really find it interesting and it&amp;rsquo;s own website was a bit ugly.&lt;/p&gt;

&lt;p&gt;Next, I try JavaScript based generators.
From my point of view, technology itself should be as close to frontend development as possible.
For example, I would rather go for JavaScript instead of Ruby.
I was not able to setup Assemble in 20-30 minutes and found it not easy to work with.
Another JavaScript tools I try were Metalsmith and Hexo.
They require their custom plugins for everything and I don&amp;rsquo;t understand, why it is better than more generic plugins of Grunt or Gulp.&lt;/p&gt;

&lt;p&gt;Next candidate was Jekyll.
It has at least twice as more GitHub stars, than second popular solution.
It is also default GitHub pages solution.
Frankly speaking, Jekyll looks good, but a bit big, so it might be difficult to write own plugins.
At that point of time, I wanted to avoid Ruby and try something else.&lt;/p&gt;

&lt;p&gt;My final choice was Hugo.
It is program, written in Golang, which provides functionality to create, develop and build static website.
As advantages I would like to mention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blazing fast build time (under 0.1 sec)&lt;/li&gt;
&lt;li&gt;Tag support: it generates search result pages for every tag used&lt;/li&gt;
&lt;li&gt;It has not only blog support, user could create any page with any url&lt;/li&gt;
&lt;li&gt;Google Analytics, Discuss, Gravatar, Social integration come out of the box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During development I use &lt;em&gt;develop&lt;/em&gt; branch for source code.
Hugo builds statis pages in &lt;em&gt;public&lt;/em&gt; folder, which is pushed to master branch using git-subtree.
You could read about this technique &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/#configure-git-workflow&#34;&gt;here&lt;/a&gt;.
To simplify deployment, there is Makefile command with following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;hugo
git add -A
git commit -m &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;rebuilding site &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;shell date&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;&lt;/span&gt;
git push origin develop
git subtree push --prefix&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;public git@github.com:pavlov99/pavlov99.github.com.git master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I would like to recommend Hugo for anybody, who wants to build static pages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://kirillpavlov.com/about/</link>
      <pubDate>Sun, 09 Aug 2015 16:20:37 +0800</pubDate>
      
      <guid>http://kirillpavlov.com/about/</guid>
      <description>

&lt;p&gt;Hi! My name is Kirill Pavlov, I&amp;rsquo;m a data scientist and software engeneer.
While I&amp;rsquo;m working on content update, check out my &lt;a href=&#34;http://kirillpavlov.com/cv/cv-kirill-pavlov.pdf&#34;&gt;CV&lt;/a&gt;,
&lt;a href=&#34;http://resume.github.io/?pavlov99&#34;&gt;github resume&lt;/a&gt; and &lt;a href=&#34;http://osrc.dfm.io/pavlov99&#34;&gt;github report card&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am also doing project Euler tasks, you could track my progress here:
&lt;img src=&#34;https://projecteuler.net/profile/pavlov99.png&#34; alt=&#34;Project Euler badge&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;my-name:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;My name&lt;/h2&gt;

&lt;p&gt;My first name is &amp;ldquo;Kirill&amp;rdquo; and my last name is &amp;ldquo;Pavlov&amp;rdquo;.
This name &lt;a href=&#34;https://en.wikipedia.org/wiki/Kirill&#34;&gt;came from Greek&lt;/a&gt;.
One of the inventors of &lt;a href=&#34;https://en.wikipedia.org/wiki/Cyrillic_alphabets&#34;&gt;Cyrillic Alpabet&lt;/a&gt; is Saint Cyrill, out names are considered the same .&lt;/p&gt;

&lt;p&gt;In English my name is pronounced as [k&amp;rsquo;iriɛl p&amp;rsquo;avlov].
My Chinese name is 巴吉霖 (bā jí lín).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>