<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on Development and Analytics Blog</title>
    <link>http://kirillpavlov.com/categories/scala/</link>
    <description>Recent content in scala on Development and Analytics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Feb 2016 21:32:38 +0800</lastBuildDate>
    
	<atom:link href="http://kirillpavlov.com/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Immutable heap implementation in Scala</title>
      <link>http://kirillpavlov.com/blog/2016/02/28/immutable-heap-implementation-in-scala/</link>
      <pubDate>Sun, 28 Feb 2016 21:32:38 +0800</pubDate>
      
      <guid>http://kirillpavlov.com/blog/2016/02/28/immutable-heap-implementation-in-scala/</guid>
      <description>Current [Heap](https://en.wikipedia.org/wiki/Heap_(data_structure)) implementation in Scala (PriorityQueue) is mutable. It means that after heap manipulation, the previous state is no longer accessible. This article describes immutable heap construction based on Scala Vector.
First of all, we need to define an interface to the Heap. It should have insert and extract methods. As far as designed data structure should be immutable, both methods should return the whole heap in addition to expected result.</description>
    </item>
    
  </channel>
</rss>